@using MagData
@inject NavigationManager NavigationManager

@page "/"

<div class="base">

<h1>Feeder</h1>

<select class="form-control" @bind="SelectedClass">
    <option value="">Select class</option>
    @foreach (var item in Classes)
    {
        <option @key=item>@item</option>
    }
</select>

@classText

<p></p>

<select class="form-control" @bind="SelectedGender">
    <option value="">Select gender</option>
    @foreach (var item in Genders)
    {
        <option @key=item>@item</option>
    }
</select>

@genderText

<p></p>

<select class="form-control" @bind="SelectedSectionId">
    <option value="">Select section ID</option>
    @foreach (var item in SectionIDs)
    {
        <option @key=item>@item</option>
    }
</select>

@sectionIdText

<p></p>

<select class="form-control" @bind="SelectedItem">
    <option value="">Select an item</option>
    @foreach (var item in FeedableItems)
    {
        <option @key=item>@item</option>
    }
</select>

@itemText

<p></p>

<button class="btn btn-primary" @onclick="Feed">Feed</button>
<button class="btn btn-primary" @onclick="() => FeedMultiple(10)">Feed 10</button>

<h2>Stats</h2>
<p>NAME: @_mag.Name</p>
<p>FEED TABLE: @_mag.FeedTable.Index</p>
<p>LVL: @_mag.MagStats.Level</p>

<table class="stat-table">
    <tr>
        <td>POW</td>
        <td>@_mag.MagStats.Pow</td>
        <td>@_mag.MagStats.PowCounter</td>
    </tr>
    <tr>
        <td>DEF</td>
        <td>@_mag.MagStats.Def</td>
        <td>@_mag.MagStats.DefCounter</td>
    </tr>
    <tr>
        <td>DEX</td>
        <td>@_mag.MagStats.Dex</td>
        <td>@_mag.MagStats.DexCounter</td>
    </tr>
    <tr>
        <td>MIND</td>
        <td>@_mag.MagStats.Mind</td>
        <td>@_mag.MagStats.MindCounter</td>
    </tr>
    <tr>
        <td>SYNCHRO</td>
        <td>@_mag.MagStats.Synchro</td>
    </tr>
    <tr>
        <td>IQ</td>
        <td>@_mag.MagStats.Iq</td>
    </tr>
</table>

<button class="btn btn-primary" @onclick="Reset">Reset</button>

<p></p><br/>

<p>@buildDate</p>

</div>

@code {

    private List<string> Classes = PlayerCharacter.GetClassNames();
    private List<string> Genders = PlayerCharacter.GetGenderNames();
    private List<string> SectionIDs = PlayerCharacter.GetSectionIdNames();
    private List<string> FeedableItems = Mag.GetFeedItemNames();

    private string SelectedItem { get; set; }
    private string SelectedClass { get; set; }
    private string SelectedGender { get; set; }
    private string SelectedSectionId { get; set; }

    private string classText = string.Empty;
    private string genderText = string.Empty;
    private string sectionIdText = string.Empty;
    private string itemText = string.Empty;

    private string buildDate = string.Empty;

    private Mag? _mag = Mag.GetDefaultMag();

    private PlayerCharacter _playerCharacter = new PlayerCharacter();

    protected override async Task OnInitializedAsync()
    {
        var httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);

        // Prevent browser caching
        var guid = Guid.NewGuid().ToString();

        var tables = await httpClient.GetFromJsonAsync<FeedTablesContainer>($"resources/FeedTables.json?{guid}");

        if (tables == null)
        {
            return;
        }

        FeedTables.SetFeedTables(tables.FeedTables);
        _mag = new Mag(Mag.GetDefaultMag());
        StateHasChanged();
    }

    private void Feed()
    {
        classText = string.Empty;
        genderText = string.Empty;
        sectionIdText = string.Empty;
        itemText = string.Empty;

        if (string.IsNullOrEmpty(SelectedClass))
        {
            classText = "Please select a class";
            return;
        }

        var classIndex = Classes.IndexOf(SelectedClass);

        if (classIndex == -1)
        {
            classText = "Please select a class";
            return;
        }

        var classType = (PlayerCharacter.Classes)classIndex;

        var genderIndex = Genders.IndexOf(SelectedGender);

        if (genderIndex == -1)
        {
            genderText = "Please select a gender";
            return;
        }

        var genderType = (PlayerCharacter.Genders) genderIndex;

        var sectionIdIndex = SectionIDs.IndexOf(SelectedSectionId);

        if (sectionIdIndex == -1)
        {
            sectionIdText = "Please select a section ID";
            return;
        }

        var sectionIdType = (SectionIDs) sectionIdIndex;

        if (string.IsNullOrEmpty(SelectedItem))
        {
            itemText = "Please select an item";
            return;
        }

        var index = FeedableItems.IndexOf(SelectedItem);

        if (index == -1)
        {
            itemText = "Please select an item";
            return;
        }

        _playerCharacter.Class = classType;
        _playerCharacter.Gender = genderType;
        _playerCharacter.SectionId = sectionIdType;
        _playerCharacter.Level = 200;

        var result = _mag.Feed((Items.Names)index, _playerCharacter);
    }

    private void FeedMultiple(int amount)
    {
        for (var i = 0; i < amount; i++)
        {
            Feed();
        }
    }

    private void Reset()
    {
        _mag = new Mag(Mag.GetDefaultMag());
    }

}